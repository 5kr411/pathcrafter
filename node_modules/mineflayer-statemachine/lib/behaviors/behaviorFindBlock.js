"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BehaviorFindBlock = void 0;
const Vec3 = require("vec3").Vec3;

/**
 * This behavior will search a configurable area around the bot in order to
 * locate a block matching the given configuration. The block will be assigned
 * to targets.position.
 *
 * If no block could be found, targets.position is set to undefined.
 */
class BehaviorFindBlock {
    /**
       * Creates a new find block behavior.
       *
       * @param bot - The bot preforming the search function.
       * @param targets - The bot targets objects.
       */
    constructor(bot, targets) {
        this.stateName = 'findBlock';
        this.active = false;
        /**
           * The list of block ids to search for.
           */
        this.blocks = [];
        this.excludedPositions = new Set();
        /**
           * The maximum distance away to look for the block.
           */
        this.maxDistance = 32;
        /**
           * If true, the bot will ignore blocks that could not be seen by it. Useful for encouraging
           * realistic behavior.
           */
        this.preventXRay = false;
        this.bot = bot;
        this.targets = targets;
    }
    onStateEntered() {
        this.targets.position = this.bot.findBlock({
            matching: (block) => this.matchesBlock(block),
            maxDistance: this.maxDistance
        })?.position;
        console.log("BehaviorFindBlock: Found block position:", this.targets.position);
    }
    matchesBlock(block) {
        if (!this.blocks.includes(block.type)) {
            return false;
        }
        if (this.preventXRay && !this.bot.canSeeBlock(block)) {
            return false;
        }
        const posKey = this.positionToString(block.position);
        if (this.excludedPositions.has(posKey)) {
            return false;
        }
        return true;
    }
    addExcludedPosition(position) {
        const posKey = this.positionToString(position);
        this.excludedPositions.add(posKey);
        console.log(`BehaviorFindBlock: Added excluded position: ${posKey}`);
        console.log(`BehaviorFindBlock: Total excluded positions: ${this.excludedPositions.size}`);
    }
    positionToString(position) {
        if (!position) return null
        return `${Math.floor(position.x)},${Math.floor(position.y)},${Math.floor(position.z)}`;
    }
}
exports.BehaviorFindBlock = BehaviorFindBlock;
